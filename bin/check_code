#!/usr/bin/env ruby

require 'fileutils'
require 'optparse'
require 'open3'

include FileUtils

default_output_dir = 'tmp'

rubocop_rails_flag = ''

def run_command(command)
  _, stdout, stderr, wait_thr = Open3.popen3(command)
  result = { stdout: stdout.gets(nil), stderr: stderr.gets(nil) }
  stdout.close
  stderr.close
  if ERROR
    fail "'#{command}' failed: #{result}" if wait_thr.value.exitstatus != 0
  end
  result
end

ALL_COMMANDS = [:cop, :audit, :brake, :critic]

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: check_code [options]'
  opts.on('-A', '--all', 'Run all checks') do |r|
    ALL_COMMANDS.each do |key|
      options[key] = r
    end
  end

  opts.on('-C', '--cop', 'Run rubocop') do |r|
    options[:cop] = r
  end

  opts.on('-D', '--audit', 'Run bundle-audit') do |r|
    options[:audit] = r
  end

  opts.on('-R', '--rails', 'Run rubocop with rails') do |_|
    rubocop_rails_flag = '-R'
  end

  opts.on('-L', '--lint', 'Run rubocop lint') do |r|
    options[:lint] = r
  end

  opts.on('-B', '--brakeman', 'Run brakeman') do |r|
    options[:brake] = r
  end

  opts.on('-T', '--rubycritic', 'Run rubycritic') do |r|
    options[:critic] = r
  end

  opts.on('-E', '--error', 'Return error for failure') do |r|
    options[:error] = r
  end

  opts.on('-O', '--output', 'Print to stdout not files') do |r|
    options[:output] = r
  end

  opts.on('-D', '--directory', 'Print to stdout not files') do |r|
    options[:directory] = r
  end
end.parse!

OUTPUT_DIR = (options[:directory] || default_output_dir)
mkdir_p(OUTPUT_DIR)

ERROR = options[:error]

OUTPUT_COMMANDS = {
  cop: "rubocop . #{rubocop_rails_flag}",
  audit: 'bundle-audit',
  lint: 'rubocop . -l',
  brake: 'brakeman',
  critic: 'rubycritic'
}

FILE_COMMANDS = {
  cop: "rubocop . #{rubocop_rails_flag} -o #{OUTPUT_DIR}/rubocop.txt",
  audit: "bundle-audit > #{OUTPUT_DIR}/bundler-audit.txt",
  lint: "rubocop . -l -o #{OUTPUT_DIR}/rubocop-lint.txt",
  brake: "brakeman -o #{OUTPUT_DIR}/brakeman.html",
  critic: 'rubycritic'
}

if options[:output]
  puts 'Running reports interactively'
  commands = OUTPUT_COMMANDS
else
  puts 'Exporting reports to file'
  commands = FILE_COMMANDS
end

commands.each_pair do |key, command|
  puts run_command(command)[:stdout] if options[key]
end

puts 'Reports complete'
